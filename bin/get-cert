#! /usr/bin/env bash
#
# Requests and installs a certificate for the specified site
#
# Usage:
#   {{go}} {{cmd}} [-c config] <site_name> [<cert_id>]
#
# Where:
#   -c config  Alternate certbot configuration file
#   site_name  Primary hostname for your web site
#   cert_id    (Optional) Base name of the CSR file without the `.csr` extension
#
# If cert_id isn't specified, the command will attempt to detect it from the CSR
# file in `$CERTBOT_HOME/certs/<site_name>` with the lexicographically greatest
# name.

_cws.get_cert() {
  local site_name
  local site_dir
  local cert_id
  local config_path="$CERTBOT_HOME/.config/letsencrypt/cli.ini"
  local csr_file
  local le_status
  local opt

  if [[ -z "$CERTBOT_CMD" ]] && ! _cws.pick_certbot_cmd; then
    @go.printf '%s' 'certbot command not found; please run ' \
      "\`$_GO_CMD certbot-setup install-certbot\`, then try again."$'\n' >&2
    return 1
  fi

  while getopts 'c:' opt; do
    case "$opt" in
    c)
      config_path="$OPTARG"
      if ! _cws.check_file_accessible 'Config' "$config_path"; then
        return 1
      fi
      ;;
    ?)
      return 1
      ;;
    esac
  done

  site_name="${!OPTIND}"
  shift "$OPTIND"
  OPTIND='0'

  if [[ -z "$site_name" ]]; then
    printf 'No site name given.\n' >&2
    return 1
  fi

  site_dir="$CERTBOT_HOME/certs/$site_name"

  if [[ ! -d "$site_dir" ]]; then
    @go.printf '%s' "$site_dir not yet created; " \
      "please run `$_GO_CMD site-setup`, then try again."$'\n' >&2
    return 1
  fi

  cert_id="$1"
  if ! _cws.get_cert_set_cert_id_and_csr_file; then
    return 1
  fi

  "${CERTBOT_CMD}" certonly -c "$config_path" --csr "$csr_file" \
    --cert-path "$site_dir/${cert_id}.crt" \
    --chain-path "$site_dir/${cert_id}.chain.pem" \
    --fullchain-path "$site_dir/${cert_id}.fullchain.pem" \
    --staple-ocsp --dry-run "$@"
  le_status="$?"

  if [[ "$le_status" -eq '0' ]]; then
    @go.printf 'Successfully generated certificate files for %s:\n' "$site_name"
    printf '  %s\n' "$site_dir/$cert_id."{crt,key,{,full}chain.pem}
  else
    @go.printf 'Failed to generate certificate files for %s.\n' "$site_name"
  fi
  return "$le_status"
}

# If cert_id is null, will attempt to detect it from the CSR file in `site_dir`
# with the lexicographically greatest name.
_cws.get_cert_set_cert_id_and_csr_file() {
  local csrs=()

  if [[ -n "$cert_id" ]]; then
    csr_file="$site_dir/${cert_id}.csr"
  else
    csrs=("$site_dir"/*.csr)

    if [[ "${csrs[0]}" == "$site_dir/*.csr" ]]; then
      @go.printf 'No Certficiate Signing Requests found in %s.\n' \
        "$site_dir" >&2
      return 1
    fi
    csr_file="${csrs[$((${#csrs[@]} - 1))]}"
    cert_id="${csr_file##*/}"
    cert_id="${cert_id%.csr}"
  fi

  @go.printf 'Using Certificate Signing Request file: %s\n' "$csr_file"

  if ! _cws.check_file_accessible 'Certificate Signing Request' \
    "$csr_file"; then
    return 1
  fi
}

_cws.get_cert "$@"
