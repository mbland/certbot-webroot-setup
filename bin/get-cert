#! /usr/bin/env bash
#
# Requests and installs a certificate for the specified site
#
# Usage:
#   {{go}} {{cmd}} [-c config] <site_name> [<cert_id>]
#
# Where:
#   -c config  Alternate certbot configuration file
#   site_name  Primary hostname for your web site
#   cert_id    (Optional) Base name of the CSR file without the `.csr` extension
#
# If cert_id isn't specified, the command will attempt to detect it from the CSR
# file in `$CERTBOT_HOME/certs/<site_name>` with the lexicographically greatest
# name.

_cws.get_cert() {
  local site_name
  local site_dir
  local cert_id
  local config_path="$CERTBOT_HOME/.config/letsencrypt/cli.ini"
  local csr_file
  local alt_names=()
  local webroot_domains=()
  local certbot_cmd=()
  local certbot_files=()
  local opt

  if [[ -z "$CERTBOT_CMD" ]] && ! _cws.pick_certbot_cmd; then
    @go.printf '%s' 'certbot command not found; please run ' \
      "\`$_GO_CMD certbot-setup install-certbot\`, then try again."$'\n' >&2
    return 1
  fi

  while getopts 'c:' opt; do
    case "$opt" in
    c)
      config_path="$OPTARG"
      if ! _cws.check_file_accessible 'Config' "$config_path"; then
        return 1
      fi
      ;;
    ?)
      return 1
      ;;
    esac
  done

  site_name="${!OPTIND}"
  shift "$OPTIND"
  OPTIND='0'

  if [[ -z "$site_name" ]]; then
    printf 'No site name given.\n' >&2
    return 1
  fi

  site_dir="$CERTBOT_HOME/certs/$site_name"

  if [[ ! -d "$site_dir" ]]; then
    @go.printf '%s' "$site_dir not yet created; " \
      "please run `$_GO_CMD site-setup`, then try again."$'\n' >&2
    return 1
  fi

  cert_id="$1"
  if ! _cws.get_cert_set_cert_id_and_csr_file; then
    return 1
  elif ! _cws.get_cert_check_for_key_file "$csr_file"; then
    return 1
  elif ! _cws.get_cert_parse_alt_names_from_csr; then
    return 1
  fi
  _cws.get_cert_set_webroot_domains

  certbot_cmd=("$CERTBOT_CMD" 'certonly' '-c' "$config_path" '--csr' "$csr_file"
    '--webroot' '--webroot-path' "$CERTBOT_HOME/challenges"
    "${webroot_domains[@]}"
    '--cert-path' "$site_dir/${cert_id}.crt"
    '--key-path' "$site_dir/${cert_id}.key"
    '--chain-path' "$site_dir/${cert_id}.chain.pem"
    '--fullchain-path' "$site_dir/${cert_id}.fullchain.pem")

  if "${certbot_cmd[@]}" ; then
    certbot_files=("$site_dir"/*"$cert_id."{crt,{,full}chain.pem})
    @go.printf 'Successfully generated certificate files for %s:\n' "$site_name"
    printf '  %s\n' "${certbot_files[@]}"
  else
    @go.printf 'Failed to generate certificate files for %s.\n' "$site_name"
    return 1
  fi

  if ! _cws.get_cert_set_permissions_and_ownership; then
    return 1
  fi
  @go.printf 'Certificate update complete.'
}

# If cert_id is null, will attempt to detect it from the CSR file in `site_dir`
# with the lexicographically greatest name.
_cws.get_cert_set_cert_id_and_csr_file() {
  local csrs=()

  if [[ -n "$cert_id" ]]; then
    csr_file="$site_dir/${cert_id}.csr"
  else
    csrs=("$site_dir"/*.csr)

    if [[ "${csrs[0]}" == "$site_dir/*.csr" ]]; then
      @go.printf 'No Certficiate Signing Requests found in %s.\n' \
        "$site_dir" >&2
      return 1
    fi
    csr_file="${csrs[$((${#csrs[@]} - 1))]}"
    cert_id="${csr_file##*/}"
    cert_id="${cert_id%.csr}"
  fi

  @go.printf 'Using Certificate Signing Request file: %s\n' "$csr_file"

  if ! _cws.check_file_accessible 'Certificate Signing Request' \
    "$csr_file"; then
    return 1
  fi
}

_cws.get_cert_check_for_key_file() {
  local key_file="${1%.csr}.key"

  if [[ ! -f "$key_file" ]]; then
    @go.printf 'There is no %s file to match the CSR file.\n' "$key_file" >&2
    return 1
  fi
}

_cws.get_cert_parse_alt_names_from_csr() {
  local line
  local in_alt_names

  @go.printf 'Searching for alternative names in %s...' "$csr_file"

  while read -r line; do
    line="${line%$'\r'}"
    if [[ -n "$in_alt_names" ]]; then
      break
    elif [[ "$line" =~ X509v3\ Subject\ Alternative\ Name: ]]; then
      in_alt_names='true'
    fi
  done < <(openssl req -in "$csr_file" -text -noout)

  if [[ -z "$in_alt_names" ]]; then
    @go.printf 'No alternative names found in CSR.\n'
    return 1
  fi

  # Since hostnames can't contain spaces, this does what we want.
  alt_names=($line)
  alt_names=("${alt_names[@]#DNS:}")
  alt_names=("${alt_names[@]%,}")
}

_cws.get_cert_set_webroot_domains() {
  local domain
  for domain in "${alt_names[@]}"; do
    webroot_domains+=('-d' "$domain")
  done
}

_cws.get_cert_set_permissions_and_ownership() {
  @go.printf 'Setting ownership and permissions for certbot files...\n'

  if ! chmod 640 "${certbot_files[@]}"; then
    @go.printf 'Failed to set permissions on cert files to 640.\n' >&2
    return 1
  fi

  if [[ "$USER" != 'certbot' ]] && \
    ! sudo chown certbot "${certbot_files[@]}"; then
    @go.printf 'Failed to set ownership on cert files to certbot.\n' >&2
    return 1
  fi
}

_cws.get_cert "$@"
