#! /usr/bin/env bash
#
# Common implementation for {{go}} commands.

export CERTBOT_CMD="${CERTBOT_CMD}"
export CERTBOT_HOME="${HOME%/*}/certbot"
export CERTBOT_CONFIG="$CERTBOT_HOME/.config/letsencrypt/cli.ini"
export CERTBOT_OS=''
export CERTBOT_OS_DISTRIBUTOR=''
export CERTBOT_OS_RELEASE=''
export CERTBOT_RSA_KEY_SIZE='2048'
export CERTBOT_EC_CURVE_NAME='prime256v1'
export CERTBOT_HPKP_MAX_AGE='5184000'

_cws.detect_system() {
  if [[ -n "$CERTBOT_OS" ]]; then
    return
  fi
  CERTBOT_OS="$OSTYPE"

  case "$CERTBOT_OS" in
  linux-gnu)
    CERTBOT_OS="Linux"
    if command -v 'lsb_release' >/dev/null; then
      CERTBOT_OS_DISTRIBUTOR="$(lsb_release -is)"
      CERTBOT_OS_RELEASE="$(lsb_release -rs)"
    fi
    ;;
  darwin*)
    CERTBOT_OS='macOS'
    ;;
  esac
}

_cws.pick_certbot_cmd() {
  for certbot_cmd in 'certbot' 'letsencrypt' 'certbot-auto'; do
    if command -v "$certbot_cmd" >/dev/null; then
      CERTBOT_CMD="$certbot_cmd"
      return
    fi
  done
  return 1
}

_cws.check_has_openssl() {
  if ! command -v openssl >/dev/null; then
    @go.printf 'Please install OpenSSL on your system and try again.\n' >&2
    return 1
  fi
}

_cws.check_file_accessible() {
  local file_type="$1"
  local file_path="$2"
  local file_desc="$file_type file $file_path"

  if ! _cws.check_file_exists "$file_type" "$file_path"; then
    return 1
  elif [[ ! -r "$file_path" ]]; then
    @go.printf "$file_desc isn't readable.\n" >&2
    return 1
  fi
}

_cws.check_file_exists() {
  local file_type="$1"
  local file_path="$2"
  local file_desc="$file_type file $file_path"

  if [[ -z "$file_path" ]]; then
    @go.printf "$file_type file not specified.\n" >&2
    return 1
  elif [[ ! -f "$file_path" ]]; then
    @go.printf "$file_desc doesn't exist or isn't a regular file.\n" >&2
    return 1
  fi
}

# Prompts the user for a line of input
#
# Arguments:
#   result_var  Name of the caller-declared variable for the result
#   prompt      Text prompt for user input
#   fail_msg    Failure message if empty input isn't valid
_cws.prompt_for_input() {
  local __cws_pfi_response

  # When @go.printf is updated to not always add a newline, use it here.
  printf '%s' "$2" >&2
  read __cws_pfi_response
  __cws_pfi_response="${__cws_pfi_response%$'\r'}"

  if [[ -z "$__cws_pfi_response" && "$3" ]]; then
    @go.printf '%s\n' "$3" >&2
    return 1
  fi
  printf -v "$1" -- '%s' "$__cws_pfi_response"
}

# Prompts the user for a yes or no response
#
# Arguments:
#   prompt  Text prompt for user input; ' (default no) ' will be appended
#
# Returns:
#   Zero on 'y' or 'yes' (case- and space- insensitive), nonzero otherwise
_cws.prompt_for_yes_or_no() {
  local response

  # When @go.printf is updated to not always add a newline, use it here.
  printf '%s (default no) ' "$1" >&2
  read response
  [[ "$response" =~ ^[[:space:]]*[Yy]([Ee][Ss])?[[:space:]]*$ ]]
}

_cws.setup_site_dir_and_private_key() {
  _cws.setup_site_dir && _cws.setup_private_key
}

_cws.setup_site_dir() {
  local ownership="certbot:${GROUPS[0]}"

  if [[ -z "$site_name" ]]; then
    if ! _cws.prompt_for_input 'site_name' \
      'What is the primary host name of your web site? ' \
      'Site name not specified; aborting.'; then
      return 1
    fi
  fi

  site_dir="$CERTBOT_HOME/certs/$site_name"

  if [[ -d "$site_dir" ]]; then
    return
  elif ! mkdir -m 770 "$site_dir"; then
    @go.printf 'Failed to make site directory %s.\n' "$site_dir" >&2
    return 1
  elif ! sudo chown "$ownership" "$site_dir"; then
    @go.printf 'Failed to set ownership of %s to %s.\n' "$site_dir" \
      "$ownership" >&2
    return 1
  fi
}

_cws.setup_private_key() {
  if [[ -z "$key_file" ]]; then
    prompt=('What private key file would you like to use for the'
      "certificate? (This file will be generated if it doesn't exist.) ")
    if ! _cws.prompt_for_input 'key_file' "${prompt[*]}" \
      'Private key not specified; aborting.'; then
      return 1
    fi
  fi

  if [[ "${key_file##*.}" != 'key' ]]; then
    @go.printf "Key file %s doesn't end with \".key\"; aborting.\n" \
      "$key_file" >&2
    return 1
  fi

  if [[ ! -e "$key_file" ]] && ! @go ssl-generate private-key "$key_file"; then
    return 1
  fi
}
