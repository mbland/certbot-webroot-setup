#! /usr/bin/env bash
#
# Creates the directories and configuration for the specified site
#
# Usage:
#   {{go}} {{cmd}} [<site_name> <key_file> <email_address> <alt_names>...]
#
# Where:
#   site_name      Canonical hostname for the web site
#   key_file       Name of the private key used to generate the CSR
#   email_address  Email address to include in the certificate
#   alt_names      One or more alternative host names to include in the CSR
#
# This will create `/home/certbot/certs/<site_name>` if it doesn't exist, and
# add the OpenSSL config and Certificate Signing Request to it. It may be also
# used to generate an updated OpenSSL config or CSR.
#
# All arguments are optional, as the user will be prompted to enter the
# necessary information as needed. If the `key_file` doesn't exist, the user
# will be prompted for the information needed to create it.
#
# The generated CSR will have the same file name (i.e. basename) as the
# `key_file`. If a CSR by that name already exists, this script will refuse to
# create it. This is to make HTTP Public Key Pinning (HPKP) more manageable by
# tracking which CSRs are associated with which private keys. This in turn
# suggests a key rotation policy that uses some form of serial numbering in the
# file names to track key, CSR, and certificate sets more easily.

_cws.site_setup() {
  local site_name="$1"
  local key_file="$2"
  local email_address="$3"
  local alt_names=("${@:4}")
  local site_dir
  local prompt
  local openssl_config
  local csr_file

  if ! _cws.site_setup_site_dir "$site_dir"; then
    return 1
  elif ! _cws.site_setup_private_key; then
    return 1
  fi

  csr_file="$site_dir/${key_file%.*}.csr"
  openssl_config="$site_dir/openssl.cnf"

  if ! _cws.site_setup_config_openssl "$site_name" "$openssl_config" \
    "$email_address" "${alt_names[@]}"; then
    return 1
  elif ! @go ssl-generate csr "$openssl_config" "$key_file" "$csr_file"; then
    return 1
  fi

  @go.printf '\nSite setup for %s complete.\n' "$site_name"
  @go.printf 'site directory:              %s\n' "$site_dir"
  @go.printf 'OpenSSL configuration:       %s\n' "$openssl_config"
  @go.printf 'Private key:                 %s\n' "$key_file"
  @go.printf 'Certificate Signing Request: %s\n' "$csr_file"
}

_cws.site_setup_site_dir() {
  local ownership="certbot:${GROUPS[0]}"

  if [[ -z "$site_name" ]]; then
    if ! _cws.prompt_for_input 'site_name' \
      'What is the primary host name of your web site? ' \
      'Site name not specified; aborting.'; then
      return 1
    fi
  fi

  site_dir="$CERTBOT_HOME/certs/$site_name"

  if [[ -d "$site_dir" ]]; then
    return
  elif ! mkdir -m 770 "$site_dir"; then
    @go.printf 'Failed to make site directory %s.\n' "$site_dir" >&2
    return 1
  elif ! sudo chown "$ownership" "$site_dir"; then
    @go.printf 'Failed to set ownership of %s to %s.\n' "$site_dir" \
      "$ownership" >&2
    return 1
  fi
}

_cws.site_setup_private_key() {
  if [[ -z "$key_file" ]]; then
    prompt=('What private key file would you like to use for the'
      "certificate? (This file will be generated if it doesn't exist.) ")
    if ! _cws.prompt_for_input 'key_file' "${prompt[*]}" \
      'Private key not specified; aborting.'; then
      return 1
    fi
  fi

  if [[ ! -e "$key_file" ]] && ! @go ssl-generate private-key "$key_file"; then
    return 1
  fi
}

_cws.site_setup_config_openssl() {
  local site_name="$1"
  local openssl_config="$2"
  local email_address="$3"
  local alt_names=("${@:4}")
  local alt_name
  local prompt
  local response
  local this_cmd="${BASH_SOURCE[0]##*/}"

  if [[ -f "$openssl_config" ]]; then
    prompt="$openssl_config already exists. Would you like to update it?"
    if ! _cws.prompt_for_yes_or_no "$prompt"; then
      return
    fi
  fi

  if [[ -z "$email_address" ]]; then
    if ! _cws.prompt_for_input 'email_address' \
      "What is the email address you'd like to use for the certificate? " \
      'Email address not specified; aborting.'; then
      return 1
    fi
  fi

  if [[ "${#alt_names[@]}" -eq '0' ]]; then
    @go.printf '%s' 'Please enter any extra host names to include, ' \
      $'one per line (enter a blank line to stop):\n' >&2
    while read alt_name; do
      alt_name="${alt_name%$'\r'}"
      if [[ -z "$alt_name" ]]; then
        break
      fi
      alt_names+=("$alt_name")
    done
  fi

  @go "$this_cmd" config-openssl "$openssl_config" "$site_name" \
    "$email_address" "${alt_names[@]}"
}

_cws.site_setup "$@"
